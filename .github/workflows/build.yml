name: fineract-frontend-v2
run-name: fineract-frontend-v2-${{ github.ref_name }}-${{ github.run_number }}

on:
  push:
    branches:
      - master
      - main
      - develop
      - release/*
  pull_request:
    branches:
      - master
      - main
      - develop
      - release/*

env:
  SHOULD_PUBLISH: ${{ github.ref  == 'refs/heads/master' ||  github.ref == 'refs/heads/develop' || startsWith(github.ref , 'refs/heads/release') }}
  IS_RELEASE: ${{ github.ref  == 'refs/heads/master' }}
  ARTIFACT_NAME: fineract-frontend-v2

jobs:
  Build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
          fetch-tags: true
          show-progress: false

      - name: Setup Node.js
        uses: actions/setup-node@v4.2.0
        with:
          node-version: 18

      - name: Angular CLI install
        run: npm install -g --silent @angular/cli@13.3.10

      - name: Set image tag & other env variables
        id: set-env
        run: |
          VERSION_TAG=$(sed 's/.*"version": "\(.*\)".*/\1/;t;d' ./package.json)
          echo "VERSION_TAG=$VERSION_TAG"

          echo "Is Release=$IS_RELEASE"

          if [ $IS_RELEASE == 'true' ]; then
            echo "This is a release"
            IMAGE_TAGS=$VERSION_TAG
          else
            echo "This is a normal build"
            IMAGE_TAGS="${VERSION_TAG}.$(date '+%Y.%m.%d').${{ github.run_number }}"
          fi
          echo "Tags: $IMAGE_TAGS"

          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_OUTPUT
          echo "IMAGE_TAGS=$IMAGE_TAGS" >> $GITHUB_OUTPUT

      - name: Install Node Packages
        run: npm install

      - name: Login to Azure registry
        uses: docker/login-action@v3.3.0
        if: ${{ env.SHOULD_PUBLISH == 'true'}}
        with:
          registry: ${{ vars.ACR_REGISTRY }}
          username: ${{ vars.ACR_PULL_USERNAME }}
          password: ${{ secrets.ACR_PULL_PASSWORD }}

      - name: Docker Build & Push
        uses: docker/Build-push-action@v6.13.0
        with:
          push: ${{ env.SHOULD_PUBLISH == 'true'}}
          tags: ${{ vars.ACR_REGISTRY }}/oneacrefund/fineract-frontend-v2:${{ steps.set-env.outputs.IMAGE_TAGS }}
          context: ${{ github.workspace }}

      - name: Use latest image tag
        run: yq -i '.image.tag = "${{ steps.set-env.outputs.IMAGE_TAGS }}"' ${{ github.workspace }}/deployment/values.yaml

      - name: Publish configuration package
        uses: actions/upload-artifact@v4.6.0
        if: ${{ env.SHOULD_PUBLISH == 'true'}}
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ github.workspace }}/deployment

  QualityCheck:
    name: Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
          fetch-tags: true
          show-progress: false

      - name: Setup Node.js
        uses: actions/setup-node@v4.2.0
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install

      - name: Run Lint and Unit Tests
        continue-on-error: true
        run: npm run test:ci

      - name: Test Coverage
        continue-on-error: true
        run: npm run test:cov

      - name: SonarCloud Scan
        uses: SonarSource/SonarCloud-github-action@v4.0.0
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          SONAR_TOKEN: "${{ secrets.SONAR_TOKEN }}"

  Integration:
    if: github.event.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    needs: [Build, QualityCheck]
    environment:
      name: Integration
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Setup Helm
        uses: one-acre-fund/oaf-actions/helm_setup@1.0.0
        with:
          ARTIFACT_NAME: "${{ env.ARTIFACT_NAME }}"
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          RUN_ID: "${{ github.run_id }}"
          CI_REPOSITORY: "${{ github.repository }}"
          K8S_URL: "${{ secrets.K8S_TEST_URL }}"
          K8S_SECRET: "${{ secrets.K8S_TEST_DEFAULT }}"

      - name: Deploy using Helm
        uses: "./.github/actions/helm_fineract_frontend"
        with:
          NAMESPACE: "${{ vars.NAMESPACE }}"
          ACR_REGISTRY: "${{ vars.ACR_REGISTRY }}"
          ACR_PULL_PASSWORD: "${{ secrets.ACR_PULL_PASSWORD }}"
          ACR_PULL_USERNAME: "${{ vars.ACR_PULL_USERNAME }}"
          REPLICAS: "${{ vars.REPLICAS }}"
          RELEASE_NAME: "${{ vars.RELEASE_NAME }}"
          FINERACT_PROXY_URL: "${{ vars.FINERACT_PROXY_URL }}"
          FINERACT_PROXY_HTTPS_PORT: "${{ vars.FINERACT_PROXY_HTTPS_PORT }}"
          FINERACT_PROXY_HTTP_PORT: "${{ vars.FINERACT_PROXY_HTTP_PORT }}"
          FINERACT_KEYCLOAK_REALM: "${{ vars.FINERACT_KEYCLOAK_REALM }}"
          FINERACT_KEYCLOAK_CLIENT_ID: "${{ vars.FINERACT_KEYCLOAK_CLIENT_ID }}"
          FINERACT_KEYCLOAK_TOKEN_URL: "${{ vars.FINERACT_KEYCLOAK_TOKEN_URL }}"
          FINERACT_KEYCLOAK_AUTH_SERVER_URL: "${{ vars.FINERACT_KEYCLOAK_AUTH_SERVER_URL }}"
          FINERACT_KEYCLOAK_API_URL: "${{ vars.FINERACT_KEYCLOAK_API_URL }}"
          FINERACT_HOST_HOME_URL: "${{ vars.FINERACT_HOST_HOME_URL }}"
          FINERACT_BASE_URL: "${{ vars.FINERACT_BASE_URL }}"
          FINERACT_AUTH_URL: "${{ vars.FINERACT_AUTH_URL }}"
          FINERACT_API_URL: "${{ vars.FINERACT_API_URL }}"
          MATOMO_SITE_ID: "${{ vars.MATOMO_SITE_ID }}"
          MATOMO_SITE_URL: "${{ vars.MATOMO_SITE_URL }}"
          SENTRY_DSN: "${{ secrets.SENTRY_DSN }}"

  QA:
    runs-on: ubuntu-latest
    needs: Integration
    if: github.event.ref == 'refs/heads/develop'
    environment:
      name: QA
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Setup Helm
        uses: one-acre-fund/oaf-actions/helm_setup@1.0.0
        with:
          ARTIFACT_NAME: "${{ env.ARTIFACT_NAME }}"
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          RUN_ID: "${{ github.run_id }}"
          CI_REPOSITORY: "${{ github.repository }}"
          K8S_URL: "${{ secrets.K8S_QA_URL }}"
          K8S_SECRET: "${{ secrets.K8S_QA_DEFAULT }}"

      - name: Deploy using Helm
        uses: "./.github/actions/helm_fineract_frontend"
        with:
          NAMESPACE: "${{ vars.NAMESPACE }}"
          ACR_REGISTRY: "${{ vars.ACR_REGISTRY }}"
          ACR_PULL_PASSWORD: "${{ secrets.ACR_PULL_PASSWORD }}"
          ACR_PULL_USERNAME: "${{ vars.ACR_PULL_USERNAME }}"
          REPLICAS: "${{ vars.REPLICAS }}"
          RELEASE_NAME: "${{ vars.RELEASE_NAME }}"
          FINERACT_PROXY_URL: "${{ vars.FINERACT_PROXY_URL }}"
          FINERACT_PROXY_HTTPS_PORT: "${{ vars.FINERACT_PROXY_HTTPS_PORT }}"
          FINERACT_PROXY_HTTP_PORT: "${{ vars.FINERACT_PROXY_HTTP_PORT }}"
          FINERACT_KEYCLOAK_REALM: "${{ vars.FINERACT_KEYCLOAK_REALM }}"
          FINERACT_KEYCLOAK_CLIENT_ID: "${{ vars.FINERACT_KEYCLOAK_CLIENT_ID }}"
          FINERACT_KEYCLOAK_TOKEN_URL: "${{ vars.FINERACT_KEYCLOAK_TOKEN_URL }}"
          FINERACT_KEYCLOAK_AUTH_SERVER_URL: "${{ vars.FINERACT_KEYCLOAK_AUTH_SERVER_URL }}"
          FINERACT_KEYCLOAK_API_URL: "${{ vars.FINERACT_KEYCLOAK_API_URL }}"
          FINERACT_HOST_HOME_URL: "${{ vars.FINERACT_HOST_HOME_URL }}"
          FINERACT_BASE_URL: "${{ vars.FINERACT_BASE_URL }}"
          FINERACT_AUTH_URL: "${{ vars.FINERACT_AUTH_URL }}"
          FINERACT_API_URL: "${{ vars.FINERACT_API_URL }}"
          MATOMO_SITE_ID: "${{ vars.MATOMO_SITE_ID }}"
          MATOMO_SITE_URL: "${{ vars.MATOMO_SITE_URL }}"
          SENTRY_DSN: "${{ secrets.SENTRY_DSN }}"

  UAT:
    runs-on: ubuntu-latest
    if: github.event.ref == 'refs/heads/main' || contains(github.event.ref, 'refs/heads/hotfix/') || contains(github.event.ref, 'refs/heads/release/')
    needs: [Build, QualityCheck]
    environment:
      name: UAT
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Setup Helm
        uses: one-acre-fund/oaf-actions/helm_setup@1.0.0
        with:
          ARTIFACT_NAME: "${{ env.ARTIFACT_NAME }}"
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          RUN_ID: "${{ github.run_id }}"
          CI_REPOSITORY: "${{ github.repository }}"
          K8S_URL: "${{ secrets.K8S_UAT_URL }}"
          K8S_SECRET: "${{ secrets.K8S_UAT_DEFAULT }}"

      - name: Deploy using Helm
        uses: "./.github/actions/helm_fineract_frontend"
        with:
          NAMESPACE: "${{ vars.NAMESPACE }}"
          ACR_REGISTRY: "${{ vars.ACR_REGISTRY }}"
          ACR_PULL_PASSWORD: "${{ secrets.ACR_PULL_PASSWORD }}"
          ACR_PULL_USERNAME: "${{ vars.ACR_PULL_USERNAME }}"
          REPLICAS: "${{ vars.REPLICAS }}"
          RELEASE_NAME: "${{ vars.RELEASE_NAME }}"
          FINERACT_PROXY_URL: "${{ vars.FINERACT_PROXY_URL }}"
          FINERACT_PROXY_HTTPS_PORT: "${{ vars.FINERACT_PROXY_HTTPS_PORT }}"
          FINERACT_PROXY_HTTP_PORT: "${{ vars.FINERACT_PROXY_HTTP_PORT }}"
          FINERACT_KEYCLOAK_REALM: "${{ vars.FINERACT_KEYCLOAK_REALM }}"
          FINERACT_KEYCLOAK_CLIENT_ID: "${{ vars.FINERACT_KEYCLOAK_CLIENT_ID }}"
          FINERACT_KEYCLOAK_TOKEN_URL: "${{ vars.FINERACT_KEYCLOAK_TOKEN_URL }}"
          FINERACT_KEYCLOAK_AUTH_SERVER_URL: "${{ vars.FINERACT_KEYCLOAK_AUTH_SERVER_URL }}"
          FINERACT_KEYCLOAK_API_URL: "${{ vars.FINERACT_KEYCLOAK_API_URL }}"
          FINERACT_HOST_HOME_URL: "${{ vars.FINERACT_HOST_HOME_URL }}"
          FINERACT_BASE_URL: "${{ vars.FINERACT_BASE_URL }}"
          FINERACT_AUTH_URL: "${{ vars.FINERACT_AUTH_URL }}"
          FINERACT_API_URL: "${{ vars.FINERACT_API_URL }}"
          MATOMO_SITE_ID: "${{ vars.MATOMO_SITE_ID }}"
          MATOMO_SITE_URL: "${{ vars.MATOMO_SITE_URL }}"
          SENTRY_DSN: "${{ secrets.SENTRY_DSN }}"

  Production:
    runs-on: ubuntu-latest
    needs: UAT
    if: github.event.ref == 'refs/heads/main' || contains(github.event.ref, 'refs/heads/hotfix/') || contains(github.event.ref, 'refs/heads/release/')
    environment:
      name: Production
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Setup Helm
        uses: one-acre-fund/oaf-actions/helm_setup@1.0.0
        with:
          ARTIFACT_NAME: "${{ env.ARTIFACT_NAME }}"
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          RUN_ID: "${{ github.run_id }}"
          CI_REPOSITORY: "${{ github.repository }}"
          K8S_URL: "${{ secrets.K8S_PROD_URL }}"
          K8S_SECRET: "${{ secrets.K8S_PROD_DEFAULT }}"

      - name: Start Maintenance Window
        id: start_maintenance
        uses: one-acre-fund/uptime-kuma-create-maintenance@1.0.0
        with:
          UPTIME_USERNAME: ${{ secrets.UPTIME_USERNAME }}
          UPTIME_PASSWORD: ${{ secrets.UPTIME_PASSWORD }}
          UPTIME_API_URL: ${{ vars.UPTIME_API_URL }}
          MAINTENANCE_TITLE: "Service Deployment"
          MONITOR_ID: ${{ vars.MONITOR_ID }}
          MONITOR_NAME: ${{ vars.MONITOR_NAME }}

      - name: Deploy using Helm
        uses: "./.github/actions/helm_fineract_frontend"
        with:
          NAMESPACE: "${{ vars.NAMESPACE }}"
          ACR_REGISTRY: "${{ vars.ACR_REGISTRY }}"
          ACR_PULL_PASSWORD: "${{ secrets.ACR_PULL_PASSWORD }}"
          ACR_PULL_USERNAME: "${{ vars.ACR_PULL_USERNAME }}"
          REPLICAS: "${{ vars.REPLICAS }}"
          RELEASE_NAME: "${{ vars.RELEASE_NAME }}"
          FINERACT_PROXY_URL: "${{ vars.FINERACT_PROXY_URL }}"
          FINERACT_PROXY_HTTPS_PORT: "${{ vars.FINERACT_PROXY_HTTPS_PORT }}"
          FINERACT_PROXY_HTTP_PORT: "${{ vars.FINERACT_PROXY_HTTP_PORT }}"
          FINERACT_KEYCLOAK_REALM: "${{ vars.FINERACT_KEYCLOAK_REALM }}"
          FINERACT_KEYCLOAK_CLIENT_ID: "${{ vars.FINERACT_KEYCLOAK_CLIENT_ID }}"
          FINERACT_KEYCLOAK_TOKEN_URL: "${{ vars.FINERACT_KEYCLOAK_TOKEN_URL }}"
          FINERACT_KEYCLOAK_AUTH_SERVER_URL: "${{ vars.FINERACT_KEYCLOAK_AUTH_SERVER_URL }}"
          FINERACT_KEYCLOAK_API_URL: "${{ vars.FINERACT_KEYCLOAK_API_URL }}"
          FINERACT_HOST_HOME_URL: "${{ vars.FINERACT_HOST_HOME_URL }}"
          FINERACT_BASE_URL: "${{ vars.FINERACT_BASE_URL }}"
          FINERACT_AUTH_URL: "${{ vars.FINERACT_AUTH_URL }}"
          FINERACT_API_URL: "${{ vars.FINERACT_API_URL }}"
          MATOMO_SITE_ID: "${{ vars.MATOMO_SITE_ID }}"
          MATOMO_SITE_URL: "${{ vars.MATOMO_SITE_URL }}"
          SENTRY_DSN: "${{ secrets.SENTRY_DSN }}"

      - name: Delete Maintenance Window
        if: always()
        uses: one-acre-fund/uptime-kuma-delete-maintenance@1.0.0
        with:
          UPTIME_USERNAME: ${{ secrets.UPTIME_USERNAME }}
          UPTIME_PASSWORD: ${{ secrets.UPTIME_PASSWORD }}
          UPTIME_API_URL: ${{ vars.UPTIME_API_URL }}
          MAINTENANCE_ID: ${{ steps.start_maintenance.outputs.maintenance_id }}
