trigger:
  - master
  - develop
  - release/*
  - hotfix/*

pr:
  - master
  - release/*
  - develop

pool:
  vmImage: "ubuntu-latest"

name: Oaf-Fineract_$(Build.SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

variables:
  # Exposes GITGUARDIAN_API_KEY and GITHUB_TOKEN
  # WARNING, on first run of the pipeline, access to this variable group will need to be approved by Devops in Azure
  - group: CodeScanningTools

steps:
  - checkout: self
    # This is required to allow MegaLinter to run git commands
    persistCredentials: true

  - script: env
    displayName: List Environment Variables

  - task: GetRevision@1
    displayName: "Get Revision"
    inputs:
      VariableName: Revision

  - script: |
      VERSION_TAG=`sed 's/.*"version": "\(.*\)".*/\1/;t;d' ./package.json`
      echo "##vso[task.setvariable variable=VERSION_TAG]$VERSION_TAG"
      IMAGE_TAGS="${VERSION_TAG}.$(date '+%Y.%m.%d').$(Revision)"
      echo "##vso[task.setvariable variable=IMAGE_SEMANTIC_HASH]$IMAGE_TAGS"
      echo Tags: $IMAGE_TAGS
      echo "##vso[task.setvariable variable=IMAGE_TAGS]$IMAGE_TAGS"
    displayName: Set image tag

  - script: |
      # Determine linting scope
      if [[ "${BUILD_REASON}" == "PullRequest" ]]; then
        echo "This is a PR build, scanning delta only"
        export VALIDATE_ALL_CODEBASE=false
        export GITHUB_SHA=$(git log -1 --pretty=%B | sed -e 's/^Merge //' -e 's/ into.*//')
      else
        echo "This is a regular build"
        # Disabling validating all codebase for now as we have a lot of legacy code
        export VALIDATE_ALL_CODEBASE=false
        export GITHUB_SHA=${BUILD_SOURCEVERSION}
      fi

      echo "VALIDATE_ALL_CODEBASE=${VALIDATE_ALL_CODEBASE}"
      echo "GITHUB_SHA=${GITHUB_SHA}"

      docker run -v "$(System.DefaultWorkingDirectory):/tmp/lint" \
        -e GITHUB_TOKEN \
        -e VALIDATE_ALL_CODEBASE \
        -e APPLY_FIXES=none \
        -e GITHUB_STATUS_REPORTER=true \
        -e GITHUB_COMMENT_REPORTER=true \
        -e CI=true \
        -e GITHUB_REF="$(Build.SourceBranch)" \
        -e GITHUB_REPOSITORY="$(Build.Repository.ID)" \
        -e GITHUB_TARGET_URL="$(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=logs&j=$(System.JobId)&t=$(System.TaskInstanceId)" \
        -e GITHUB_SHA \
        oxsecurity/megalinter-cupcake:latest
    displayName: Lint with MegaLinter
    env:
      GITHUB_TOKEN: $(GITHUB_TOKEN)
  
  # Optional: upload MegaLinter reports to the Azure build for future reference
  - task: PublishPipelineArtifact@1
    condition: succeededOrFailed()
    displayName: Publish MegaLinter reports
    inputs:
      targetPath: "$(System.DefaultWorkingDirectory)/megalinter-reports/"
      artifactName: MegaLinterReport

  - script: |
      docker run \
        -v $(pwd):/data \
        --env-file <(env | grep -e SYSTEM_ -e BUILD_ -e TF_ -e AGENT_) \
        -e CI=true \
        -e GITGUARDIAN_API_KEY \
        gitguardian/ggshield:latest ggshield secret scan ci
    condition: succeededOrFailed()
    displayName: GitGuardian Scan
    env:
      GITGUARDIAN_API_KEY: $(GITGUARDIAN_API_KEY)

  - task: NodeTool@0
    inputs:
      versionSpec: "16.x"
    displayName: "Install Node.js"
    condition: eq(variables['Build.Analyse'], 'true')

  - script: |
      npm install
    displayName: "Install Node Packages"
    workingDirectory: "$(System.DefaultWorkingDirectory)"
    condition: eq(variables['Build.Analyse'], 'true')

  - task: SonarCloudPrepare@1
    continueOnError: true
    condition: eq(variables['Build.SonarAnalyse'], 'true')
    inputs:
      SonarCloud: "sonar-oaf"
      organization: "one-acre-fund"
      scannerMode: "CLI"
      configMode: "manual"
      cliProjectKey: "one-acre-fund_fineract-frontend-v2"
      cliProjectName: "fineract-frontend-v2"
      cliSources: ./src
      cliProjectVersion: $VERSION_TAG
      configFile: $(System.DefaultWorkingDirectory)/sonar-project.properties
      extraProperties: |
        sonar.verbose=true
        #Path to working dir
        sonar.working.directory=$(System.DefaultWorkingDirectory)
        #Path to functions dir as base for analysis
        sonar.projectBaseDir=$(System.DefaultWorkingDirectory)
        #Path to source files
        sonar.sources=./src
        #Path to test files
        sonar.tests=./src/app
        sonar.test.inclusions=**/*.spec.ts
        #Path to report
        sonar.javascript.lcov.reportPaths=$(System.DefaultWorkingDirectory)/coverage/mifosx-web-app/lcov.info

  - script: |
      npm run test:ci
    displayName: "Run Lint and Unit Tests"
    workingDirectory: "$(System.DefaultWorkingDirectory)"
    continueOnError: true
    condition: eq(variables['Build.Analyse'], 'true')

  - script: |
      npm run test:cov
    displayName: "Generate Test Coverage Report  "
    workingDirectory: "$(System.DefaultWorkingDirectory)"
    continueOnError: true
    condition: eq(variables['Build.Analyse'], 'true')

  - task: PublishCodeCoverageResults@1
    continueOnError: true
    condition: eq(variables['Build.Analyse'], 'true')
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: "$(System.DefaultWorkingDirectory)/**/*coverage.xml"
      reportDirectory: "$(System.DefaultWorkingDirectory)/coverage/mifosx-web-app"

  - task: SonarCloudAnalyze@1
    continueOnError: true
    condition: eq(variables['Build.SonarAnalyse'], 'true')

  - task: SonarCloudPublish@1
    continueOnError: true
    condition: eq(variables['Build.SonarAnalyse'], 'true')
    inputs:
      pollingTimeoutSec: "300"

  - task: Docker@2
    displayName: Login to Azure registry
    inputs:
      containerRegistry: "azurecr-oaf"
      command: "login"

  - task: Docker@2
    displayName: Build and push an image to container registry
    condition: and(succeeded(), or(eq(variables['Build.SourceBranchName'], 'main'), eq(variables['Build.SourceBranchName'], 'develop'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'), startsWith(variables['Build.SourceBranch'], 'refs/heads/hotfix/')))
    inputs:
      command: buildAndPush
      repository: "oneacrefund/fineract-frontend-v2"
      dockerfile: "$(System.DefaultWorkingDirectory)/Dockerfile"
      containerRegistry: "azurecr-oaf"
      tags: |
        $(IMAGE_TAGS)
  
  - task: Bash@3
    displayName: Use latest image tag
    inputs:
      targetType: "inline"
      script: |
        sed -i 's/tag:.*/tag: $(IMAGE_TAGS)/' values.yaml

  - task: CopyFiles@2
    displayName: Copying source files
    inputs:
      SourceFolder: "./"
      Contents: "*.yaml"
      TargetFolder: "$(Build.ArtifactStagingDirectory)"

  - task: PublishBuildArtifacts@1
    displayName: Publish configuration package
    condition: and(succeeded(), or(eq(variables['Build.SourceBranchName'], 'main'), eq(variables['Build.SourceBranchName'], 'develop'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'), startsWith(variables['Build.SourceBranch'], 'refs/heads/hotfix/')))
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)
      ArtifactName: "fineract-frontend-v2"
      publishLocation: "Container"
